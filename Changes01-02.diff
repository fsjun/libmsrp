diff -urN msrp-0.1/Makefile msrp-0.2/Makefile
--- msrp-0.1/Makefile	2007-04-14 12:13:34.000000000 +0200
+++ msrp-0.2/Makefile	2007-04-23 11:44:38.000000000 +0200
@@ -6,7 +6,7 @@
 LIBS = -lpthread #-lssl -lcrypto
 
 so: $(OBJS)
-	$(CC) -ggdb -shared -Wl,-soname,libmsrp.so.0 -o libmsrp.so.0.0.1 $(OBJS) $(OPTS) $(LIBS)
+	$(CC) -ggdb -shared -Wl,-soname,libmsrp.so.0 -o libmsrp.so.0.0.2 $(OBJS) $(OPTS) $(LIBS)
 
 %.o: %.c
 	$(CC) -fPIC -ggdb -c $< -o $@ $(OPTS)
@@ -29,8 +29,8 @@
 
 install:
 	@echo Installing MSRP library to $(PREFIX)/lib/:
-	install -m 755 libmsrp.so.0.0.1 $(PREFIX)/lib/
-	ln -sf $(PREFIX)/lib/libmsrp.so.0.0.1 $(PREFIX)/lib/libmsrp.so.0
+	install -m 755 libmsrp.so.0.0.2 $(PREFIX)/lib/
+	ln -sf $(PREFIX)/lib/libmsrp.so.0.0.2 $(PREFIX)/lib/libmsrp.so.0
 	ln -sf $(PREFIX)/lib/libmsrp.so.0 $(PREFIX)/lib/libmsrp.so
 	@echo Installing MSRP headers to $(PREFIX)/include/:
 	install -m 755 msrp.h $(PREFIX)/include/
diff -urN msrp-0.1/msrp.c msrp-0.2/msrp.c
--- msrp-0.1/msrp.c	2007-04-14 14:24:39.000000000 +0200
+++ msrp-0.2/msrp.c	2007-04-23 10:42:51.000000000 +0200
@@ -18,6 +18,7 @@
 
 	events = app_events;		/* The callback to notify about events (logs/errors) */
 
+	pthread_t recv_thread;
 	pthread_attr_t attr;
 	pthread_attr_init(&attr);
 	pthread_attr_setdetachstate(&attr, PTHREAD_CREATE_DETACHED);
@@ -903,7 +904,22 @@
 }
 
 /*
-	Send an announcement to a user (all users if ID=0) in a switch (conference room)
+	Send a SEND message to a user (all users if ID=0) in a switch (conference room)
+*/
+int msrp_switch_message(MsrpSwitch *switcher, unsigned short int ID, char *text)
+{
+	if(!switcher || !text)
+		return -1;
+
+	msrp_conference *conf = msrp_conference_find(switcher);
+	if(!conf)
+		return -1;
+
+	return msrp_conference_message(conf, ID, text);
+}
+
+/*
+	Send a REPORT announcement to a user (all users if ID=0) in a switch (conference room)
 */
 int msrp_switch_announcement(MsrpSwitch *switcher, unsigned short int ID, char *text)
 {
diff -urN msrp-0.1/msrp.h msrp-0.2/msrp.h
--- msrp-0.1/msrp.h	2007-04-14 14:24:49.000000000 +0200
+++ msrp-0.2/msrp.h	2007-04-23 10:42:00.000000000 +0200
@@ -137,6 +137,7 @@
 unsigned short int msrp_switch_add_user(MsrpSwitch *switcher, char *display, const char *path, int content, int flags, int rights);
 int msrp_switch_update_user_rights(MsrpSwitch *switcher, unsigned short int ID, int rights);
 int msrp_switch_remove_user(MsrpSwitch *switcher, unsigned short int ID);
+int msrp_switch_message(MsrpSwitch *switcher, unsigned short int ID, char *text);
 int msrp_switch_announcement(MsrpSwitch *switcher, unsigned short int ID, char *text);
 int msrp_switch_destroy(MsrpSwitch *switcher);
 
diff -urN msrp-0.1/msrp_switch.c msrp-0.2/msrp_switch.c
--- msrp-0.1/msrp_switch.c	2007-04-14 14:25:52.000000000 +0200
+++ msrp-0.2/msrp_switch.c	2007-04-23 10:48:00.000000000 +0200
@@ -1,5 +1,8 @@
 #include "msrp_switch.h"
 
+/*
+	Create a new conference switch
+*/
 msrp_conference *msrp_conference_new(MsrpSwitch *sw, unsigned long int ID)
 {
 	if(!sw || !ID)
@@ -25,6 +28,9 @@
 	return conf;
 }
 
+/*
+	Get the conference object associated to the specified public switch instance
+*/
 msrp_conference *msrp_conference_find(MsrpSwitch *sw)
 {
 	if(!sw)
@@ -80,6 +86,9 @@
 	return conf;
 }
 
+/*
+	Set the local conference endpoint associated with the conference
+*/
 int msrp_conference_set_from(msrp_conference *switcher, msrp_peer *from)
 {
 	if(!switcher || !from)
@@ -89,6 +98,9 @@
 	return msrp_peer_listen(switcher->server);
 }
 
+/*
+	Add a user to the conference switch
+*/
 unsigned short int msrp_conference_add_user(msrp_conference *conf, char *display, msrp_peer *peer)
 {
 	if(!conf || !peer)
@@ -137,6 +149,9 @@
 	return user->ID;
 }
 
+/*
+	Update the read/write rights for this user in the conference
+*/
 int msrp_conference_set_user_rights(msrp_conference *switcher, unsigned short int ID, int rights)
 {
 	if(!switcher || !ID)
@@ -154,6 +169,9 @@
 	return msrp_peer_set_rights(user->peer, rights);
 }
 
+/*
+	Get the user associated with the specified address
+*/
 int msrp_conference_match_user(msrp_conference *switcher, int fd, struct sockaddr_in *addr)
 {
 	if(!switcher || (fd < 1) || !addr)
@@ -208,6 +226,9 @@
 	return 0;
 }
 
+/*
+	Remove a user from the conference
+*/
 int msrp_conference_remove_user(msrp_conference *conf, unsigned short int ID)
 {
 	if(!conf || !ID)
@@ -239,6 +260,9 @@
 	return 0;
 }
 
+/*
+	Forward a just received message to all the other users
+*/
 int msrp_conference_forward_message(msrp_conference *switcher, int fd, struct msrp_session *session, char *data, int bytes)
 {
 	if(!switcher || !session || !data || (fd < 0))
@@ -279,6 +303,9 @@
 	return 0;
 }
 
+/*
+	Destroy an existing conference switch
+*/
 int msrp_conference_destroy(msrp_conference *conf)
 {
 	if(!conf)
@@ -306,6 +333,31 @@
 	return 0;
 }
 
+/*
+	Send a SEND message to a user (all users if ID=0) in the conference
+*/
+int msrp_conference_message(msrp_conference *switcher, unsigned short int ID, char *text)
+{
+	if(!switcher || !text)
+		return -1;
+
+	msrp_conf_user *user = NULL;
+	MSRP_LIST_CHECK(switcher->users, 0);
+	MSRP_LIST_CROSS(switcher->users, switcher->lock, user)
+		if(!ID || (ID == user->ID)) {
+			if(msrp_queue_text(MSRP_SEND, user->session, text, 0, 200) < 0)
+				local_events(MSRP_ERROR, "\tCouldn't send text to user %hu in conference %lu", user->ID, switcher->ID);
+			else
+				local_events(MSRP_LOG, "\tSent text to user %hu in conference %lu", user->ID, switcher->ID);
+		}
+	MSRP_LIST_STEP(switcher->users, switcher->lock, user)
+
+	return 0;
+}
+
+/*
+	Send a REPORT announcement to a user (all users if ID=0) in the conference
+*/
 int msrp_conference_announcement(msrp_conference *switcher, unsigned short int ID, char *text)
 {
 	if(!switcher || !text)
diff -urN msrp-0.1/msrp_switch.h msrp-0.2/msrp_switch.h
--- msrp-0.1/msrp_switch.h	2007-04-14 14:25:39.000000000 +0200
+++ msrp-0.2/msrp_switch.h	2007-04-23 10:43:02.000000000 +0200
@@ -41,6 +41,7 @@
 int msrp_conference_match_user(msrp_conference *switcher, int fd, struct sockaddr_in *addr);
 int msrp_conference_remove_user(msrp_conference *switcher, unsigned short int ID);
 int msrp_conference_forward_message(msrp_conference *switcher, int fd, struct msrp_session *session, char *data, int bytes);
+int msrp_conference_message(msrp_conference *switcher, unsigned short int ID, char *text);
 int msrp_conference_announcement(msrp_conference *switcher, unsigned short int ID, char *text);
 int msrp_conference_destroy(msrp_conference *switcher);
 
